// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Models.Context;

#nullable disable

namespace Models.Migrations
{
    [DbContext(typeof(MyDbContext))]
    partial class MyDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Models.Models.Address", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Buliding")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Department_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Time")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Address");
                });

            modelBuilder.Entity("Models.Models.Administration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Administration");
                });

            modelBuilder.Entity("Models.Models.Attachments", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("File")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("Attachments");
                });

            modelBuilder.Entity("Models.Models.Classification_field", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Activity")
                        .HasColumnType("int");

                    b.Property<int>("Area")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Terms")
                        .HasColumnType("bit");

                    b.Property<string>("location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Classification_field");
                });

            modelBuilder.Entity("Models.Models.Dependencies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ManagerSign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectManager")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectOwnerSign")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Dependencies");
                });

            modelBuilder.Entity("Models.Models.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("Models.Models.Feasibility_of_the_project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Benefits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Challenge_Opportunities")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Main_output")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Requires_purchase")
                        .HasColumnType("bit");

                    b.Property<int>("Strategic_Pillars")
                        .HasColumnType("int");

                    b.Property<decimal>("Total_cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Work_Scope")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Feasibility_of_the_project");
                });

            modelBuilder.Entity("Models.Models.Fine_Mechanism", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FineMechanism")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("fine_Mechanisms");
                });

            modelBuilder.Entity("Models.Models.Introduction_and_Terms", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Compition_definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Represintator_Info_Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.HasIndex("Represintator_Info_Id")
                        .IsUnique();

                    b.ToTable("introduction_And_Terms");
                });

            modelBuilder.Entity("Models.Models.Main", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Main");
                });

            modelBuilder.Entity("Models.Models.Main_Criteria", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Criteria")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Delivering_Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("main_Criterias");
                });

            modelBuilder.Entity("Models.Models.Offers_Evaluation_Standards", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Percentage")
                        .HasColumnType("int");

                    b.Property<string>("Standard_Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("Offers_Evaluation_Standards");
                });

            modelBuilder.Entity("Models.Models.ProjectAdministrations", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdministrationId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProJectDetailsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdministrationId");

                    b.HasIndex("ProJectDetailsId");

                    b.ToTable("projectAdministrations");
                });

            modelBuilder.Entity("Models.Models.ProjectDetails", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CompetetionName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Competetion_purpsue")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Project_OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Recuire_Prototype")
                        .HasColumnType("bit");

                    b.Property<string>("Technical_Department")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("project_Duration")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.HasIndex("Project_OwnerId");

                    b.ToTable("projectDetails");
                });

            modelBuilder.Entity("Models.Models.ProjectInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Dependance")
                        .HasColumnType("int");

                    b.Property<string>("Depended_Project")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Expected_Duration")
                        .HasColumnType("int");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Project_MangerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Project_OwnerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Terms")
                        .HasColumnType("int");

                    b.Property<int>("_Mecanism_Output")
                        .HasColumnType("int");

                    b.Property<int>("catogary")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.HasIndex("Project_MangerId")
                        .IsUnique();

                    b.HasIndex("Project_OwnerId")
                        .IsUnique();

                    b.ToTable("projectInfos");
                });

            modelBuilder.Entity("Models.Models.Represintator_Info", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EMail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FaxNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("represintator_Infos");
                });

            modelBuilder.Entity("Models.Models.Rules_and_Offer_Decumentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Alternative_mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Apillity_to_partition")
                        .HasColumnType("bit");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Financial_reules_List")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Mechanesim_to_compitions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Technical_reules_list")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Rules_and_Offer_Decumentation");
                });

            modelBuilder.Entity("Models.Models.Services__Standards", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Custom_Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Machines_Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Project_Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Quality_Standards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Resource_Rules")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Safety_Standards")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("services__Standards");
                });

            modelBuilder.Entity("Models.Models.Supplies", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Clause")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MainId1")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Mandatory_list")
                        .HasColumnType("bit");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Specifications")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("category_code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("measruing_unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.HasIndex("MainId1");

                    b.ToTable("supplies");
                });

            modelBuilder.Entity("Models.Models.Team_Work_Standards", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Job_Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Minimum_years_exp")
                        .HasColumnType("int");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("Team_Work_Standards");
                });

            modelBuilder.Entity("Models.Models.Technical_Definitions", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Defination")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Project_Limitation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Term")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("MainId");

                    b.ToTable("Technical_Definitions");
                });

            modelBuilder.Entity("Models.Models.Work_Services", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("How_to")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("bit");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MainId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MainId")
                        .IsUnique();

                    b.ToTable("Work_Services");
                });

            modelBuilder.Entity("Models.Models.Address", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("address")
                        .HasForeignKey("Models.Models.Address", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Attachments", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("attachments")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Classification_field", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("classification_field")
                        .HasForeignKey("Models.Models.Classification_field", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Dependencies", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("dependencie")
                        .HasForeignKey("Models.Models.Dependencies", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Employee", b =>
                {
                    b.HasOne("Models.Models.Administration", "Administration")
                        .WithMany("employees")
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administration");
                });

            modelBuilder.Entity("Models.Models.Feasibility_of_the_project", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("feasibility_Of_The_Project")
                        .HasForeignKey("Models.Models.Feasibility_of_the_project", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Fine_Mechanism", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("fine_Mechanisms")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Introduction_and_Terms", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("introduction_And_Terms")
                        .HasForeignKey("Models.Models.Introduction_and_Terms", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Represintator_Info", "Represintator_Info")
                        .WithOne("introduction_And_Terms")
                        .HasForeignKey("Models.Models.Introduction_and_Terms", "Represintator_Info_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");

                    b.Navigation("Represintator_Info");
                });

            modelBuilder.Entity("Models.Models.Main_Criteria", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("main_Criterias")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Offers_Evaluation_Standards", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("offers_Evaluations")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.ProjectAdministrations", b =>
                {
                    b.HasOne("Models.Models.Administration", "administration")
                        .WithMany("projectAdministrations")
                        .HasForeignKey("AdministrationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.ProjectDetails", "projectDetails")
                        .WithMany("Administration")
                        .HasForeignKey("ProJectDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("administration");

                    b.Navigation("projectDetails");
                });

            modelBuilder.Entity("Models.Models.ProjectDetails", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("projectDetails")
                        .HasForeignKey("Models.Models.ProjectDetails", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Employee", "Project_Owner")
                        .WithMany("projectDetails")
                        .HasForeignKey("Project_OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");

                    b.Navigation("Project_Owner");
                });

            modelBuilder.Entity("Models.Models.ProjectInfo", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("projectInfo")
                        .HasForeignKey("Models.Models.ProjectInfo", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Employee", "Project_Manger")
                        .WithOne("Project_Manger")
                        .HasForeignKey("Models.Models.ProjectInfo", "Project_MangerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Employee", "Project_Owner")
                        .WithOne("Project_Owner")
                        .HasForeignKey("Models.Models.ProjectInfo", "Project_OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");

                    b.Navigation("Project_Manger");

                    b.Navigation("Project_Owner");
                });

            modelBuilder.Entity("Models.Models.Rules_and_Offer_Decumentation", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("Rules_and_Offer")
                        .HasForeignKey("Models.Models.Rules_and_Offer_Decumentation", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Services__Standards", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("services__Standards")
                        .HasForeignKey("Models.Models.Services__Standards", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Supplies", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("supplies")
                        .HasForeignKey("Models.Models.Supplies", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Models.Models.Main", null)
                        .WithMany("Supplies")
                        .HasForeignKey("MainId1");

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Team_Work_Standards", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("Work_Standards")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Technical_Definitions", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithMany("technical_Definitions")
                        .HasForeignKey("MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Work_Services", b =>
                {
                    b.HasOne("Models.Models.Main", "Main")
                        .WithOne("work_Services")
                        .HasForeignKey("Models.Models.Work_Services", "MainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Main");
                });

            modelBuilder.Entity("Models.Models.Administration", b =>
                {
                    b.Navigation("employees");

                    b.Navigation("projectAdministrations");
                });

            modelBuilder.Entity("Models.Models.Employee", b =>
                {
                    b.Navigation("Project_Manger")
                        .IsRequired();

                    b.Navigation("Project_Owner")
                        .IsRequired();

                    b.Navigation("projectDetails");
                });

            modelBuilder.Entity("Models.Models.Main", b =>
                {
                    b.Navigation("Rules_and_Offer")
                        .IsRequired();

                    b.Navigation("Supplies");

                    b.Navigation("Work_Standards");

                    b.Navigation("address")
                        .IsRequired();

                    b.Navigation("attachments");

                    b.Navigation("classification_field")
                        .IsRequired();

                    b.Navigation("dependencie")
                        .IsRequired();

                    b.Navigation("feasibility_Of_The_Project")
                        .IsRequired();

                    b.Navigation("fine_Mechanisms");

                    b.Navigation("introduction_And_Terms")
                        .IsRequired();

                    b.Navigation("main_Criterias");

                    b.Navigation("offers_Evaluations");

                    b.Navigation("projectDetails")
                        .IsRequired();

                    b.Navigation("projectInfo")
                        .IsRequired();

                    b.Navigation("services__Standards")
                        .IsRequired();

                    b.Navigation("supplies")
                        .IsRequired();

                    b.Navigation("technical_Definitions");

                    b.Navigation("work_Services")
                        .IsRequired();
                });

            modelBuilder.Entity("Models.Models.ProjectDetails", b =>
                {
                    b.Navigation("Administration");
                });

            modelBuilder.Entity("Models.Models.Represintator_Info", b =>
                {
                    b.Navigation("introduction_And_Terms")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
